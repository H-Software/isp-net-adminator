---

volumes:
  adminator-php-log:
  grafana-storage:
  mysql-data:
  postgres-data:
  pgadmin-data:
  mssql-data:
  adminator-tmp:
  adminator-export:
  adminator-print-temp:

networks:
  default:
    # name: playground-monitoring
    external: false

configs:
  collector_conf:
    file: ./configs/otel-collector/collector.yml

services:
  nginx:
    build:
      context: ./
      dockerfile: ./configs/nginx/Dockerfile
    develop:
      watch: 
        - path: ./
          action: rebuild
    ports:
      - 80:80
      - 443:443
    # depends_on:
    #   fpm:
    #     condition: service_healthy
    #     restart: true

  fpm:
    image: h-software/isp-net-adminator-fpm
    # image: ghcr.io/h-software/isp-net-adminator:pr-137
    build:
      context: ./
      target: main
    # user: "www-data:www-data"
    develop:
      watch: 
        - path: ./
          action: rebuild
    environment:
      # DB conn
      - MYSQL_SERVER=192.168.1.213
      - MYSQL_USER=root
      - MYSQL_PASSWD=isp-net-passwd
      # DB conn 2
      - POSTGRES_SERVER=192.168.1.213
      - POSTGRES_USER=adminator
      - POSTGRES_PASSWD=isp-net-passwd
      - POSTGRES_DB=adminator.new
      # otel
      - OTEL_PHP_AUTOLOAD_ENABLED=true
      - OTEL_SERVICE_NAME=isp-adminator3
      - OTEL_TRACES_EXPORTER=otlp # otlp OR console
      - OTEL_METRICS_EXPORTER=none
      - OTEL_LOGS_EXPORTER=none
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf # grpc OR http/protobuf
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      # - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.name=isp-adminator3,application.name=isp-adminator3
    volumes:
      - adminator-php-log:/var/log/php:uid=33,gid=33
      - adminator-export:/srv/www/adminator3/export:uid=33,gid=33
      - adminator-print-temp:/srv/www/adminator3/print/temp:uid=33,gid=33

      - adminator-tmp:/tmp:/tmp
    tmpfs:
      # for smarty
      - /srv/www/adminator2/cache:uid=33,gid=33
      - /srv/www/adminator3/cache:uid=33,gid=33
      - /srv/www/adminator2/templates_c:uid=33,gid=33
      - /srv/www/adminator3/templates_c:uid=33,gid=33
      # for nette loader
      - /srv/www/adminator2/temp:uid=33,gid=33
      - /srv/www/adminator3/temp:uid=33,gid=33
      # monolog + some scripts log files
      - /srv/www/adminator3/logs:uid=33,gid=33
      - /srv/www/adminator2/log:uid=33,gid=33
      # adminator print
      - /srv/www/adminator3/print/temp:uid=33,gid=33
      # adminator export xls
      - /srv/www/adminator2/export:uid=33,gid=33
      # - /var/www/html/adminator3/export:uid=33,gid=33
    ports:
      - "9001:9001"
      - "9002:9002"
    # https://docs.docker.com/compose/compose-file/05-services/#healthcheck
    # https://docs.docker.com/reference/dockerfile/#healthcheck
    healthcheck:
      test: "(FCGI_CONNECT=localhost:9001 php-fpm-healthcheck && FCGI_CONNECT=localhost:9002 php-fpm-healthcheck --accepted-conn=100)"
      interval: 1m
      timeout: 2s
      retries: 3
      start_period: 10s
      start_interval: 1s

  mysql:
    image: mysql:8.0
    cap_add:
      - SYS_NICE
    restart: always
    command:
      # https://dev.mysql.com/doc/mysql-linuxunix-excerpt/8.3/en/docker-mysql-more-topics.html#docker-configuring-server
      - --character-set-server=utf8
      - --collation-server=utf8_unicode_ci
      # workaround for: The server requested authentication method unknown to the client
      - --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_DATABASE=adminator2
      - MYSQL_ROOT_PASSWORD=isp-net-passwd
    ports:
      - '3306:3306'
    volumes:
      - mysql-data:/var/lib/mysql
      # - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  adminer:
    image: adminer
    ports:
      - 8081:8080
    environment:
      - ADMINER_DEFAULT_SERVER=192.168.1.213
      - MYSQL_DATABASE=adminator2
      - MYSQL_ROOT_PASSWORD=isp-net-passwd
    depends_on:
      - mysql
  
  postgres:
    image: postgres:12-alpine
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=isp-net-passwd
      - POSTGRES_USER=adminator
      - POSTGRES_DB=adminator.new
    healthcheck:
      test: "(pg_isready -U postgres || exit 1)"
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 30s
      start_interval: 5s

  # fix permissions: echo "host all all all $POSTGRES_HOST_AUTH_METHOD" >> pg_hba.conf
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - "8082:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    restart: always
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "Password123"
    ports:
      - 1433:1433
    volumes:
      - mssql-data:/var/opt/mssql

  routeros-6-48:
    image: evilfreelancer/docker-routeros:6.48.3
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
      - /dev/kvm
    ports:
      - "12222:22"
      - "12223:23"
      - "18728:8728"
      - "18729:8729"

  otel-collector:
    deploy:
      resources:
        limits:
          memory: 125M
    ports:
      - "4317:4317"          # OTLP over gRPC receiver
      - "4318:4318"          # OTLP over HTTP receiver
      - "8888:8888"     # metrics
      - "1888:1888"     # pprof extension
      - "13133:13133"   # health_check extension
    # https://hub.docker.com/r/otel/opentelemetry-collector-contrib/tags
    image: otel/opentelemetry-collector-contrib:0.100.0
    configs:
      - source: collector_conf
        target: /conf/collector.yml
    command: ["--config=/conf/collector.yml"]
    # https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-environment-attribute
    environment:
      # grafana cloud
      - GRAFANA_CLOUD_KEY=${GRAFANA_CLOUD_KEY}
    volumes:
      - /:/hostfs
      - "/var/run/docker.sock.raw:/var/run/docker.sock"

#   grafana:
#     labels:
#       - "traefik.enable=true"
#       - "traefik.http.routers.grafana.rule=Host(`grafana.127.0.0.1.nip.io`)"
#       - "traefik.http.services.grafana.loadbalancer.server.port=3000"
#       - "traefik.http.routers.grafana.entrypoints=web"
#     # https://hub.docker.com/r/grafana/grafana/tags
#     image: grafana/grafana:latest
# #    networks:
# #      - monitoring
#     ports:
#       - "3000:3000"
#     environment:
#     # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#override-configuration-with-environment-variables
#       - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#       - GF_AUTH_ANONYMOUS_ENABLED=true
#       - GF_AUTH_BASIC_ENABLED=false
#       - GF_DATE_FORMATS_DEFAULT_TIMEZONE=browser
#       - GF_ALLOW_LOADING_UNSIGNED_PLUGINS=servicenow-cloudobservability-datasource
# #      - GF_LOG_LEVEL=debug
# #      - GF_DEFAULT_APP_MODE=development
#       - GF_TRACING_OPENTELEMETRY_OTLP_ADDRESS=otel-collector:4317
# #      tracing.opentelemetry.otlp:
# #        address: jaeger-operator-jaeger-collector.jaeger-system.svc:4317
#     volumes:
#       - grafana-storage:/var/lib/grafana
#       - ./dist:/var/lib/grafana/plugins
#       #      - ./dashboards:/var/lib/grafana/dashboards
# #        - ./provisioning:/etc/grafana/provisioning
# #      - ./grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
#       - ./grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml

#   prometheus:
#     labels:
#       - "traefik.enable=true"
#       - "traefik.http.routers.prometheus.rule=Host(`prometheus.127.0.0.1.nip.io`)"
#       - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
#       - "traefik.http.routers.prometheus.entrypoints=web"
#     image: prom/prometheus:v2.47.2
#     command:
# #      - '--log.level=debug'
#       - '--enable-feature=remote-write-receiver'
#       - '--config.file=/etc/prometheus/prometheus.yml'
#     volumes:
#       - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
# #    networks:
# #      - monitoring
#     ports:
#       - "9090:9090"

  # traefik:
  #   image: "traefik:v3.0" # v2.10
  #   # container_name: "traefik"
  #   command:
  #     #- "--log.level=DEBUG"
  #     - "--api.insecure=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--metrics.prometheus=true"
  #     - "--tracing=true"
  #     - "--tracing.openTelemetry.address=otel-collector:4317"
  #     - "--tracing.openTelemetry.insecure=true"
  #     - "--tracing.openTelemetry.grpc=true"
  #   ports:
  #     - "80:80"
  #     - "8080:8080"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
