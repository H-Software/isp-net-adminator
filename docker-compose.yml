---
version: "3.8"

volumes:
#  esdata01:
#    driver: local
  grafana-storage:

networks:
  default:
    # name: playground-monitoring
    external: false

# configs:
#   collector_conf:
#     file: ./confs/collector.yml

services:
  adminator:
    image: h-software/isp-net-adminator
    build: .
    # command:
    #   - sleep inf
    ports:
      - "8080:80"
  
  # otel-collector:
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 125M
  #   ports:
  #     - "4317"          # OTLP over gRPC receiver
  #     - "4318"          # OTLP over HTTP receiver
  #   # https://hub.docker.com/r/otel/opentelemetry-collector-contrib/tags
  #   image: otel/opentelemetry-collector-contrib:0.88.0
  #   configs:
  #     - source: collector_conf
  #       target: /conf/collector.yml
  #   command: ["--config=/conf/collector.yml"]
  #   # https://docs.docker.com/compose/environment-variables/set-environment-variables/#use-the-environment-attribute
  #   environment:
  #     # lightstep stuff
  #     - LS_ACCESS_TOKEN=${LS_ACCESS_TOKEN}
  #     # new relic stuff
  #     # https://docs.newrelic.com/docs/infrastructure/prometheus-integrations/install-configure-remote-write/set-your-prometheus-remote-write-integration/
  #     - PROMETHEUS_CLUSTER_NAME="k6-playground-prometheus"
  #     - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
  #   volumes:
  #     - /:/hostfs
  #     - "/var/run/docker.sock.raw:/var/run/docker.sock"

#   grafana:
#     labels:
#       - "traefik.enable=true"
#       - "traefik.http.routers.grafana.rule=Host(`grafana.127.0.0.1.nip.io`)"
#       - "traefik.http.services.grafana.loadbalancer.server.port=3000"
#       - "traefik.http.routers.grafana.entrypoints=web"
#     # https://hub.docker.com/r/grafana/grafana/tags
#     image: grafana/grafana:latest
# #    networks:
# #      - monitoring
#     ports:
#       - "3000:3000"
#     environment:
#     # https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#override-configuration-with-environment-variables
#       - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#       - GF_AUTH_ANONYMOUS_ENABLED=true
#       - GF_AUTH_BASIC_ENABLED=false
#       - GF_DATE_FORMATS_DEFAULT_TIMEZONE=browser
#       - GF_ALLOW_LOADING_UNSIGNED_PLUGINS=servicenow-cloudobservability-datasource
# #      - GF_LOG_LEVEL=debug
# #      - GF_DEFAULT_APP_MODE=development
#       - GF_TRACING_OPENTELEMETRY_OTLP_ADDRESS=otel-collector:4317
# #      tracing.opentelemetry.otlp:
# #        address: jaeger-operator-jaeger-collector.jaeger-system.svc:4317
#     volumes:
#       - grafana-storage:/var/lib/grafana
#       - ./dist:/var/lib/grafana/plugins
#       #      - ./dashboards:/var/lib/grafana/dashboards
# #        - ./provisioning:/etc/grafana/provisioning
# #      - ./grafana-dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
#       - ./grafana/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml

#   prometheus:
#     labels:
#       - "traefik.enable=true"
#       - "traefik.http.routers.prometheus.rule=Host(`prometheus.127.0.0.1.nip.io`)"
#       - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
#       - "traefik.http.routers.prometheus.entrypoints=web"
#     image: prom/prometheus:v2.47.2
#     command:
# #      - '--log.level=debug'
#       - '--enable-feature=remote-write-receiver'
#       - '--config.file=/etc/prometheus/prometheus.yml'
#     volumes:
#       - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
# #    networks:
# #      - monitoring
#     ports:
#       - "9090:9090"

  # traefik:
  #   image: "traefik:v3.0" # v2.10
  #   # container_name: "traefik"
  #   command:
  #     #- "--log.level=DEBUG"
  #     - "--api.insecure=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--metrics.prometheus=true"
  #     - "--tracing=true"
  #     - "--tracing.openTelemetry.address=otel-collector:4317"
  #     - "--tracing.openTelemetry.insecure=true"
  #     - "--tracing.openTelemetry.grpc=true"
  #   ports:
  #     - "80:80"
  #     - "8080:8080"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
